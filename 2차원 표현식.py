# N = 3
#
# list_list = [[0] * N for i in range(N)]
#
# print(list_list)
#
# # 2차원 리스트 모두 출력하기
# # N * N 크기의 2차원 리스트
# # 큰 리스트의 길이
# for x in range(N):
#     # 작은 리스트의 길이
#     for y in range(N):
#         print(list_list[x][y])
#
#
# # 내 현재 위치
# # now[0] = x
# # now[1] = y
# now = [1,1]
#
# # 델타 배열
# # 이 배열이 의미하는것
# # dx[0] => 상으로 움직인다
# # 인덱스가 0이면 상
# # 인덱스가 1이면 하
# # 인덱스가 2이면 좌
# # 인덱스가 3이면 우
# dx = [-1,1,0,0] # x의 변화
# dy = [0,0,-1,1] # y의 변화
#
# # 현재 위치에서 상하좌우로 한번 움직여보기
# for d in range(4):
#     nx = now[0] + dx[d]
#     ny = now[1] + dy[d]
#     print(nx, ny)
#
#
# [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
# 0
# 0
# 0
# 0
# 0
# 0
# 0
# 0
# 0
# 0 1
# 2 1
# 1 0
# 1 2
#
# [9]
N = 5

list2 = [[0] * N for _ in range(N)]

print(list2)

now = [2,2]
x = 2
y = 2
#
# # 하 우 우 로 움직이고나서 좌표는 어디일까요??
# # 1  3  3
#
# # 상 하 좌 우
# # 0  1  2  3
# moves = [1,3,3]
#
# # 상하좌우
# dx = [-1,1,0,0]
# dy = [0,0,-1,1]
#
# # 동서남북
# # 우좌하상
# # dx = [0,0,1,-1]
# # dy = [1,-1,0,0]
#
# # d는 방향
# # d = 0 ?? 상
# # d = 1 ?? 하
# # d = 2 ?? 좌
# # d = 3 ?? 우
# for d in moves:
#     nx = now[0] + dx[d]
#     ny = now[1] + dy[d]
#     print(nx, ny)
#     now = [nx,ny] # 현재 위치 최신화
#
# print(f"최종 위치 : ({now[0]},{now[1]})")
#
#
# [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
# 3 2
# 3 3
# 3 4
# 최종 위치 : (3,4)

